import tkinter
import os
from tkinter import filedialog,messagebox
import PIL
from PIL import Image,ImageTk
#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.21
#  in conjunction with Tcl version 8.6
#    Mar 03, 2019 12:36:03 PM IST  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import NEWARAI1_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (root)
    NEWARAI1_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    NEWARAI1_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        top.geometry("711x585+250+20")
        top.resizable(False,False)
        top.title("ARAI ORGANIZATION")
        self.Photo = tkinter.PhotoImage(file="G:/pycharmproject/page/download.png")
        top.iconphoto(top, self.Photo)
        top.configure(background="#1262A3")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")
        self.top=top

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.028, rely=-0.051, height=91, width=97)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(anchor='s')
        self.Label1.configure(background="#1262A3")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font="-family {Segoe UI} -size 11")
        self.Label1.configure(foreground="#f9f9f9")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Path :''')

        self.lblresult = tk.Label(top)
        self.lblresult.place(relx=0.141, rely=0.051, height=31, width=457)
        self.lblresult.configure(activebackground="#f9f9f9")
        self.lblresult.configure(activeforeground="black")
        self.lblresult.configure(anchor='e')
        self.lblresult.configure(background="#ffffff")
        self.lblresult.configure(borderwidth="0")
        self.lblresult.configure(disabledforeground="#a3a3a3")
        self.lblresult.configure(font="-family {Segoe UI} -size 9")
        self.lblresult.configure(foreground="#000000")
        self.lblresult.configure(highlightbackground="#d9d9d9")
        self.lblresult.configure(highlightcolor="black")
        self.lblresult.configure(width=457)

        self.btnpath = tk.Button(top)
        self.btnpath.place(relx=0.802, rely=0.051, height=35, width=45)
        self.btnpath.configure(activebackground="#ececec")
        self.btnpath.configure(activeforeground="#000000")
        self.btnpath.configure(background="#E8E8E8")
        self.btnpath.configure(disabledforeground="#a3a3a3")
        self.btnpath.configure(font="-family {Segoe UI} -size 14")
        self.btnpath.configure(foreground="#000000")
        self.btnpath.configure(highlightbackground="#d9d9d9")
        self.btnpath.configure(highlightcolor="black")
        self.btnpath.configure(highlightthickness="0")
        self.btnpath.configure(pady="0")
        self.btnpath.configure(text='''...''')
        tooltip_font = "TkDefaultFont"
        ToolTip(self.btnpath, tooltip_font, '''Browse''', delay=0.01)

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.Frame2 = tk.Frame(top)
        self.Frame2.place(relx=0.056, rely=0.137, relheight=0.812
                , relwidth=0.893)
        self.Frame2.configure(relief='groove')
        self.Frame2.configure(borderwidth="2")
        self.Frame2.configure(relief='groove')
        self.Frame2.configure(background="#1262A3")
        self.Frame2.configure(highlightbackground="#d9d9d9")
        self.Frame2.configure(highlightcolor="black")
        self.Frame2.configure(width=635)

        self.lblmessage = tk.Label(self.Frame2)
        self.lblmessage.place(relx=0.031, rely=0.021, height=301, width=587)
        self.lblmessage.configure(activebackground="#f9f9f9")
        self.lblmessage.configure(activeforeground="black")
        self.lblmessage.configure(anchor='nw')
        self.lblmessage.configure(background="#e5e5e5")
        self.lblmessage.configure(disabledforeground="#a3a3a3")
        self.lblmessage.configure(foreground="#000000")
        self.lblmessage.configure(highlightbackground="#d9d9d9")
        self.lblmessage.configure(highlightcolor="black")
        self.lblmessage.configure(padx="10")
        self.lblmessage.configure(pady="20")
        self.lblmessage.configure(width=587)

        img = Image.open('download.png')
        img = img.resize((287, 151), Image.ANTIALIAS)
        img = ImageTk.PhotoImage(img)
        self.lblmessage.configure(image=img,anchor = tk.CENTER)
        self.lblmessage.image = img

        self.Label2 = tk.Label(self.Frame2)
        self.Label2.place(relx=0.031, rely=0.758, height=81, width=587)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(padx="10")
        self.Label2.configure(pady="20")
        self.Label2.configure(width=587)

        self.Message1 = tk.Message(top)
        self.Message1.place(relx=0.056, rely=0.667, relheight=0.075
                , relwidth=0.134)
        self.Message1.configure(background="#1262A3")
        self.Message1.configure(font="-family {Segoe UI} -size 11 -underline 1")
        self.Message1.configure(foreground="#f2f2f2")
        self.Message1.configure(highlightbackground="#d9d9d9")
        self.Message1.configure(highlightcolor="#000000")
        self.Message1.configure(text='''Result :''')
        self.Message1.configure(width=90)

        self.Button1 = tk.Button(top)
        self.Button1.place(relx=0.886, rely=0.051, height=35, width=45)
        self.Button1.configure(activebackground="#ececec")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Run''')
        tooltip_font = "TkDefaultFont"
        ToolTip(self.Button1, tooltip_font, '''Click to Execute''', delay=0.01)
        self.path = ""
        self.name = ""
        self.set_ui()

    def set_ui(self):
        self.btnpath.configure(command=self.showpath)
        self.Button1.configure(command=self.get_ml_result)

    def showpath(self):
        self.lblresult.configure(text="")
        self.Label2.configure(text="")
        self.path = filedialog.askopenfilename(title="select your file", filetypes=[("Micrograph", ".jpg .png .tif")])
        self.name = os.path.basename(self.path)
        # str = self.path[0:len(self.path) - len(self.name) - 1]
        self.lblresult.configure(text=self.path, anchor="w")

    def get_ml_result(self):
        if len(self.path) == 0:
            messagebox.showerror("NoFileSelectedError!!", "Please select a file to execute")
        else:
            self.Label2.configure(text = self.name,anchor="w")


# ======================================================
# Modified by Rozen to remove Tkinter import statements and to receive 
# the font as an argument.
# ======================================================
# Found the original code at:
# http://code.activestate.com/recipes/576688-tooltip-for-tkinter/
# ======================================================
# How to use this class...
#   Copy the file tooltip.py into your working directory
#   import this into the _support python file created by Page
#   from tooltip import ToolTip
#   in the _support python file, create a function to attach each tooltip
#   to the widgets desired. Example:
#   ToolTip(self.widgetname, font, msg='Exit program', follow=False, delay=0.5)
# ======================================================
from time import time, localtime, strftime

class ToolTip(tk.Toplevel):
    """
    Provides a ToolTip widget for Tkinter.
    To apply a ToolTip to any Tkinter widget, simply pass the widget to the
    ToolTip constructor
    """
    def __init__(self, wdgt, tooltip_font, msg=None, msgFunc=None,
                 delay=1, follow=True):
        """
        Initialize the ToolTip

        Arguments:
          wdgt: The widget this ToolTip is assigned to
          tooltip_font: Font to be used
          msg:  A static string message assigned to the ToolTip
          msgFunc: A function that retrieves a string to use as the ToolTip text
          delay:   The delay in seconds before the ToolTip appears(may be float)
          follow:  If True, the ToolTip follows motion, otherwise hides
        """
        self.wdgt = wdgt
        # The parent of the ToolTip is the parent of the ToolTips widget
        self.parent = self.wdgt.master
        # Initalise the Toplevel
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        # Hide initially
        self.withdraw()
        # The ToolTip Toplevel should have no frame or title bar
        self.overrideredirect(True)

        # The msgVar will contain the text displayed by the ToolTip
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        # The text of the ToolTip is displayed in a Message widget
        tk.Message(self, textvariable=self.msgVar, bg='#FFFFDD',
                font=tooltip_font,
                aspect=1000).grid()

        # Add bindings to the widget.  This will NOT override
        # bindings that the widget already has
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')

    def spawn(self, event=None):
        """
        Spawn the ToolTip.  This simply makes the ToolTip eligible for display.
        Usually this is caused by entering the widget

        Arguments:
          event: The event that called this funciton
        """
        self.visible = 1
        # The after function takes a time argument in miliseconds
        self.after(int(self.delay * 1000), self.show)

    def show(self):
        """
        Displays the ToolTip if the time delay has been long enough
        """
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()

    def move(self, event):
        """
        Processes motion within the widget.
        Arguments:
          event: The event that called this function
        """
        self.lastMotion = time()
        # If the follow flag is not set, motion within the
        # widget will make the ToolTip disappear
        #
        if self.follow is False:
            self.withdraw()
            self.visible = 1

        # Offset the ToolTip 10x10 pixes southwest of the pointer
        self.geometry('+%i+%i' % (event.x_root+20, event.y_root-10))
        try:
            # Try to call the message function.  Will not change
            # the message if the message function is None or
            # the message function fails
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)

    def hide(self, event=None):
        """
        Hides the ToolTip.  Usually this is caused by leaving the widget
        Arguments:
          event: The event that called this function
        """
        self.visible = 0
        self.withdraw()

# ===========================================================
#                   End of Class ToolTip
# ===========================================================

if __name__ == '__main__':
    vp_start_gui()





